const translations = {
    english: {
        siteTitle: "NEXUS",
        diagnosisLabel: "Diagnosis Query",
        searchButton: "Search",
        placeholder: "Enter diagnosis‚Ä¶",
        retrievedMatches: "Retrieved Matches",
        noData: "No data yet",
        loading: "Loading"
    },
    hindi: {
        siteTitle: "‡§®‡•á‡§ï‡•ç‡§∏‡§∏",
        diagnosisLabel: "‡§®‡§ø‡§¶‡§æ‡§® ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
        searchButton: "‡§ñ‡•ã‡§ú‡•á‡§Ç",
        placeholder: "‡§®‡§ø‡§¶‡§æ‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‚Ä¶",
        retrievedMatches: "‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§Æ‡§ø‡§≤‡§æ‡§®",
        noData: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç",
        loading: "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à"
    },
    tamil: {
        siteTitle: "‡Æ®‡ØÜ‡Æï‡Øç‡Æ∏‡Æ∏‡Øç",
        diagnosisLabel: "‡Æ®‡Øã‡ÆØ‡Æ±‡Æø‡Æ§‡Æ≤‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø",
        searchButton: "‡Æ§‡Øá‡Æü‡Æ≤‡Øç",
        placeholder: "‡Æ®‡Øã‡ÆØ‡Æ±‡Æø‡Æ§‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç‚Ä¶",
        retrievedMatches: "‡ÆÆ‡ØÄ‡Æü‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç",
        noData: "‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà",
        loading: "‡Æè‡Æ±‡Øç‡Æ±‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ"
    },
    bengali: {
        siteTitle: "‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶æ‡¶∏",
        diagnosisLabel: "‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®",
        searchButton: "‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®",
        placeholder: "‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‚Ä¶",
        retrievedMatches: "‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶Æ‡¶ø‡¶≤",
        noData: "‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á",
        loading: "‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá"
    },
    assamese: {
        siteTitle: "‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶æ‡¶∏",
        diagnosisLabel: "‡ß∞‡ßã‡¶ó ‡¶®‡¶ø‡ß∞‡ßç‡¶£‡¶Ø‡¶º ‡¶™‡ßç‡ß∞‡¶∂‡ßç‡¶®",
        searchButton: "‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡ß∞‡¶ï",
        placeholder: "‡ß∞‡ßã‡¶ó ‡¶®‡¶ø‡ß∞‡ßç‡¶£‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡¶ï‚Ä¶",
        retrievedMatches: "‡¶â‡¶¶‡ßç‡¶ß‡¶æ‡ß∞ ‡¶ï‡ß∞‡¶æ ‡¶Æ‡¶ø‡¶≤‡¶∏‡¶Æ‡ßÇ‡¶π",
        noData: "‡¶è‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡¶æ‡¶á",
        loading: "‡¶≤‡ßã‡¶° ‡¶π‡ßà ‡¶Ü‡¶õ‡ßá"
    },
    // üî• NEW LANGUAGE TRANSLATIONS
    malayalam: {
        siteTitle: "‡¥®‡µÜ‡¥ï‡µç‚Äå‡¥∏‡¥∏‡µç",
        diagnosisLabel: "‡¥∞‡µã‡¥ó‡¥®‡¥ø‡µº‡¥£‡¥Ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç",
        searchButton: "‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥ï",
        placeholder: "‡¥∞‡µã‡¥ó‡¥®‡¥ø‡µº‡¥£‡¥Ø‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï...",
        retrievedMatches: "‡¥≤‡¥≠‡¥ø‡¥ö‡µç‡¥ö ‡¥™‡µä‡¥∞‡µÅ‡¥§‡µç‡¥§‡¥ô‡µç‡¥ô‡µæ",
        noData: "‡¥á‡¥§‡µÅ‡¥µ‡¥∞‡µÜ ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥Ø‡¥ø‡¥≤‡µç‡¥≤",
        loading: "‡¥≤‡µã‡¥°‡µÅ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ"
    }
};

const languageNames = {
    english: "English",
    hindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    tamil: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
    bengali: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
    assamese: "‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
    // üî• NEW LANGUAGE NAME
    malayalam: "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç"
};

let currentLanguage = "english";

function applyLanguage(lang) {
    const t = translations[lang];
    document.getElementById("site-title").textContent = t.siteTitle;
    document.getElementById("diagnosis-label").textContent = t.diagnosisLabel;
    document.getElementById("search-button").textContent = t.searchButton;
    document.getElementById("diagnosis").placeholder = t.placeholder;
    document.getElementById("retrieved-matches").textContent = t.retrievedMatches;

    const output = document.getElementById("output");
    if (
        output.textContent === translations[currentLanguage].noData ||
        output.textContent === "No data yet"
    ) {
        output.textContent = t.noData;
    }

    document.getElementById("lang-current").textContent = languageNames[lang];
    updateActiveOption(lang);
    currentLanguage = lang;
}

function updateActiveOption(selectedLang) {
    const options = document.querySelectorAll(".lang-option");
    options.forEach(option => {
        option.classList.remove("active");
        const langKey = option.getAttribute("onclick").match(/'([^']+)'/)[1];
        if (langKey === selectedLang) {
            option.classList.add("active");
        }
    });
}

function toggleDropdown() {
    const dropdown = document.querySelector(".lang-dropdown");
    dropdown.classList.toggle("open");
}

function selectLanguage(lang) {
    applyLanguage(lang);
    document.querySelector(".lang-dropdown").classList.remove("open");
}

document.addEventListener("click", function (event) {
    const dropdown = document.querySelector(".lang-dropdown");
    const isClickInside = dropdown.contains(event.target);

    if (!isClickInside && dropdown.classList.contains("open")) {
        dropdown.classList.remove("open");
    }
});

// üî• NEW THEME TOGGLE LOGIC
const themeButton = document.getElementById("theme-button");

function toggleTheme() {
    const body = document.body;
    body.classList.toggle("dark-mode");

    // Save preference to localStorage
    if (body.classList.contains("dark-mode")) {
        localStorage.setItem("theme", "dark");
        themeButton.textContent = "‚òÄÔ∏è";
    } else {
        localStorage.setItem("theme", "light");
        themeButton.textContent = "üåô";
    }
}

function loadTheme() {
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const body = document.body;

    // If no preference is saved, use system preference
    if (!savedTheme) {
        if (prefersDark) {
            body.classList.add("dark-mode");
            themeButton.textContent = "‚òÄÔ∏è";
        }
    } else if (savedTheme === "dark") {
        body.classList.add("dark-mode");
        themeButton.textContent = "‚òÄÔ∏è";
    }
}

themeButton.addEventListener("click", toggleTheme);

// Loader
function showLoader(container) {
    const t = translations[currentLanguage];
    container.innerHTML = `
    <div class="loader-container">
      <div class="loader"></div>
      <div class="loading-text">
        ${t.loading}<span class="dots"></span>
      </div>
    </div>
  `;
    const dotsEl = container.querySelector(".dots");
    let i = 0;
    const interval = setInterval(() => {
        i = (i + 1) % 4;
        dotsEl.textContent = ".".repeat(i);
    }, 400);

    container.dataset.loadingInterval = interval;
}

function clearLoader(container) {
    const intervalId = container.dataset.loadingInterval;
    if (intervalId) {
        clearInterval(intervalId);
        delete container.dataset.loadingInterval;
    }
}

async function fetchHealth() {
    const url = "https://backend-kl02.onrender.com/health";
    const container = document.getElementById("output");
    try {
        showLoader(container);
        const response = await fetch(url);
        const data = await response.json();
        clearLoader(container);
        container.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    } catch (err) {
        clearLoader(container);
        container.innerHTML = `<p style="color:red; text-align:center;">Error fetching health data</p>`;
    }
}

async function fetchData() {
    const diagnosis = document.getElementById("diagnosis").value.trim();
    const container = document.getElementById("output");
    if (!diagnosis) {
        container.innerHTML = `<p style="color:red; text-align:center;">Please enter a diagnosis.</p>`;
        return;
    }
    try {
        showLoader(container);
        const url = `https://backend-kl02.onrender.com/api/v1/autocomplete?query=${encodeURIComponent(
            diagnosis
        )}`;
        const response = await fetch(url);
        const data = await response.json();
        clearLoader(container);
        container.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    } catch (err) {
        clearLoader(container);
        container.innerHTML = `<p style="color:red; text-align:center;">Error fetching autocomplete</p>`;
    }
}

document.getElementById("diagnosis").addEventListener("keydown", e => {
    if (e.key === "Enter") {
        e.preventDefault();
        fetchData();
    }
});

document.addEventListener("DOMContentLoaded", () => {
    applyLanguage("english");
    loadTheme(); // Load theme preference on startup
    fetchHealth();
});