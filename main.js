const translations = {
    english: {
        siteTitle: "NEXUS",
        homePage: {
            diagnosisLabel: "Diagnosis Query",
            searchButton: "Search",
            placeholder: "Enter diagnosis‚Ä¶",
            retrievedMatches: "Retrieved Matches",
        },
        codesystemPage: {
            diagnosisLabel: "Number of Codes you want",
            searchButton: "Search",
            placeholder: "Enter Size",
            retrievedMatches: "Retrieved Table",
        },
        noData: "No data yet",
        loading: "Loading"
    },
    hindi: {
        siteTitle: "‡§®‡•á‡§ï‡•ç‡§∏‡§∏",
        homePage: {
            diagnosisLabel: "‡§®‡§ø‡§¶‡§æ‡§® ‡§™‡•ç‡§∞‡§∂‡•ç‡§®",
            searchButton: "‡§ñ‡•ã‡§ú‡•á‡§Ç",
            placeholder: "‡§®‡§ø‡§¶‡§æ‡§® ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‚Ä¶",
            retrievedMatches: "‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§Æ‡§ø‡§≤‡§æ‡§®",
        },
        codesystemPage: {
            diagnosisLabel: "‡§ï‡•ã‡§° ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
            searchButton: "‡§ñ‡•ã‡§ú‡•á‡§Ç",
            placeholder: "‡§Ü‡§ï‡§æ‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç",
            retrievedMatches: "‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§§‡§æ‡§≤‡§ø‡§ï‡§æ",
        },
        noData: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§°‡•á‡§ü‡§æ ‡§®‡§π‡•Ä‡§Ç",
        loading: "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à"
    },
    tamil: {
        siteTitle: "‡Æ®‡ØÜ‡Æï‡Øç‡Æ∏‡Æ∏‡Øç",
        homePage: {
            diagnosisLabel: "‡Æ®‡Øã‡ÆØ‡Æ±‡Æø‡Æ§‡Æ≤‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø",
            searchButton: "‡Æ§‡Øá‡Æü‡Æ≤‡Øç",
            placeholder: "‡Æ®‡Øã‡ÆØ‡Æ±‡Æø‡Æ§‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç‚Ä¶",
            retrievedMatches: "‡ÆÆ‡ØÄ‡Æü‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç",
        },
        codesystemPage: {
            diagnosisLabel: "‡Æ§‡Øá‡Æµ‡Øà‡ÆØ‡Ææ‡Æ© ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡ØÄ‡Æü‡ØÅ‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡Æé‡Æ£‡Øç‡Æ£‡Æø‡Æï‡Øç‡Æï‡Øà",
            searchButton: "‡Æ§‡Øá‡Æü‡Æ≤‡Øç",
            placeholder: "‡ÆÖ‡Æ≥‡Æµ‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç",
            retrievedMatches: "‡ÆÆ‡ØÄ‡Æü‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà",
        },
        noData: "‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà",
        loading: "‡Æè‡Æ±‡Øç‡Æ±‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ"
    },
    bengali: {
        siteTitle: "‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶æ‡¶∏",
        homePage: {
            diagnosisLabel: "‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®",
            searchButton: "‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®",
            placeholder: "‡¶∞‡ßã‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶£‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‚Ä¶",
            retrievedMatches: "‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶Æ‡¶ø‡¶≤",
        },
        codesystemPage: {
            diagnosisLabel: "‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶° ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ö‡¶æ‡¶®",
            searchButton: "‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®",
            placeholder: "‡¶Ü‡¶ï‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
            retrievedMatches: "‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶∏‡¶æ‡¶∞‡¶£‡ßÄ",
        },
        noData: "‡¶è‡¶ñ‡¶®‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á",
        loading: "‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá"
    },
    assamese: {
        siteTitle: "‡¶®‡ßá‡¶ï‡ßç‡¶∏‡¶æ‡¶∏",
        homePage: {
            diagnosisLabel: "‡ß∞‡ßã‡¶ó ‡¶®‡¶ø‡ß∞‡ßç‡¶£‡¶Ø‡¶º ‡¶™‡ßç‡ß∞‡¶∂‡ßç‡¶®",
            searchButton: "‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡ß∞‡¶ï",
            placeholder: "‡ß∞‡ßã‡¶ó ‡¶®‡¶ø‡ß∞‡ßç‡¶£‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡¶ï‚Ä¶",
            retrievedMatches: "‡¶â‡¶¶‡ßç‡¶ß‡¶æ‡ß∞ ‡¶ï‡ß∞‡¶æ ‡¶Æ‡¶ø‡¶≤‡¶∏‡¶Æ‡ßÇ‡¶π",
        },
        codesystemPage: {
            diagnosisLabel: "‡¶Ü‡¶™‡ßÅ‡¶®‡¶ø ‡¶¨‡¶ø‡¶ö‡ß∞‡¶æ ‡¶ï'‡¶°‡ß∞ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ",
            searchButton: "‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡ß∞‡¶ï",
            placeholder: "‡¶Ü‡¶ï‡¶æ‡ß∞ ‡¶≤‡¶ø‡¶ñ‡¶ï",
            retrievedMatches: "‡¶â‡¶¶‡ßç‡¶ß‡¶æ‡ß∞ ‡¶ï‡ß∞‡¶æ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ",
        },
        noData: "‡¶è‡¶§‡¶ø‡¶Ø‡¶º‡¶æ‡¶ì ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡¶æ‡¶á",
        loading: "‡¶≤‡ßã‡¶° ‡¶π‡ßà ‡¶Ü‡¶õ‡ßá"
    },
    malayalam: {
        siteTitle: "‡¥®‡µÜ‡¥ï‡µç‚Äå‡¥∏‡¥∏‡µç",
        homePage: {
            diagnosisLabel: "‡¥∞‡µã‡¥ó‡¥®‡¥ø‡µº‡¥£‡¥Ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç",
            searchButton: "‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥ï",
            placeholder: "‡¥∞‡µã‡¥ó‡¥®‡¥ø‡µº‡¥£‡¥Ø‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï...",
            retrievedMatches: "‡¥≤‡¥≠‡¥ø‡¥ö‡µç‡¥ö ‡¥™‡µä‡¥∞‡µÅ‡¥§‡µç‡¥§‡¥ô‡µç‡¥ô‡µæ",
        },
        codesystemPage: {
            diagnosisLabel: "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü ‡¥ï‡µã‡¥°‡µÅ‡¥ï‡¥≥‡µÅ‡¥ü‡µÜ ‡¥é‡¥£‡µç‡¥£‡¥Ç",
            searchButton: "‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥ï",
            placeholder: "‡¥µ‡¥≤‡µÅ‡¥™‡µç‡¥™‡¥Ç ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï",
            retrievedMatches: "‡¥≤‡¥≠‡¥ø‡¥ö‡µç‡¥ö ‡¥™‡¥ü‡µç‡¥ü‡¥ø‡¥ï",
        },
        noData: "‡¥á‡¥§‡µÅ‡¥µ‡¥∞‡µÜ ‡¥°‡¥æ‡¥±‡µç‡¥±‡¥Ø‡¥ø‡¥≤‡µç‡¥≤",
        loading: "‡¥≤‡µã‡¥°‡µÅ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ"
    }
};

const languageNames = {
    english: "English",
    hindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    tamil: "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç",
    bengali: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
    assamese: "‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
    malayalam: "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç"
};

let currentLanguage = "english";

function applyLanguage(lang) {
    const t = translations[lang];

    // Determine which page's translations to use
    let pageTranslations;
    if (window.location.pathname.includes("codesystem.html")) {
        pageTranslations = t.codesystemPage;
    } else {
        pageTranslations = t.homePage;
    }

    document.getElementById("site-title").textContent = t.siteTitle;
    document.getElementById("diagnosis-label").textContent = pageTranslations.diagnosisLabel;
    document.getElementById("search-button").textContent = pageTranslations.searchButton;
    document.getElementById("diagnosis").placeholder = pageTranslations.placeholder;
    document.getElementById("retrieved-matches").textContent = pageTranslations.retrievedMatches;

    const output = document.getElementById("output");
    if (
        output.textContent === translations[currentLanguage].noData ||
        output.textContent === "No data yet"
    ) {
        output.textContent = t.noData;
    }

    document.getElementById("lang-current").textContent = languageNames[lang];
    updateActiveOption(lang);
    currentLanguage = lang;
}

function updateActiveOption(selectedLang) {
    const options = document.querySelectorAll(".lang-option");
    options.forEach(option => {
        option.classList.remove("active");
        const langKey = option.getAttribute("onclick").match(/'([^']+)'/)[1];
        if (langKey === selectedLang) {
            option.classList.add("active");
        }
    });
}

function toggleDropdown() {
    const dropdown = document.querySelector(".lang-dropdown");
    dropdown.classList.toggle("open");
}

function selectLanguage(lang) {
    applyLanguage(lang);
    document.querySelector(".lang-dropdown").classList.remove("open");
}

document.addEventListener("click", function (event) {
    const dropdown = document.querySelector(".lang-dropdown");
    const isClickInside = dropdown.contains(event.target);

    if (!isClickInside && dropdown.classList.contains("open")) {
        dropdown.classList.remove("open");
    }
});

const themeButton = document.getElementById("theme-button");

function toggleTheme() {
    const body = document.body;
    body.classList.toggle("dark-mode");

    if (body.classList.contains("dark-mode")) {
        localStorage.setItem("theme", "dark");
        themeButton.textContent = "üåô";
    } else {
        localStorage.setItem("theme", "light");
        themeButton.textContent = "‚òÄÔ∏è";
    }
}

function loadTheme() {
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    const body = document.body;

    let currentTheme = "light";
    if (savedTheme) {
        currentTheme = savedTheme;
    } else if (prefersDark) {
        currentTheme = "dark";
    }

    if (currentTheme === "dark") {
        body.classList.add("dark-mode");
        themeButton.textContent = "üåô";
    } else {
        body.classList.remove("dark-mode");
        themeButton.textContent = "‚òÄÔ∏è";
    }
}

themeButton.addEventListener("click", toggleTheme);

function showLoader(container) {
    const t = translations[currentLanguage];
    container.innerHTML = `
    <div class="loader-container">
      <div class="loader"></div>
      <div class="loading-text">
        ${t.loading}<span class="dots"></span>
      </div>
    </div>
  `;
    const dotsEl = container.querySelector(".dots");
    let i = 0;
    const interval = setInterval(() => {
        i = (i + 1) % 4;
        dotsEl.textContent = ".".repeat(i);
    }, 400);

    container.dataset.loadingInterval = interval;
}

function clearLoader(container) {
    const intervalId = container.dataset.loadingInterval;
    if (intervalId) {
        clearInterval(intervalId);
        delete container.dataset.loadingInterval;
    }
}

async function fetchHealth() {
    const url = "https://backend-kl02.onrender.com/api/v1/health";
    const container = document.getElementById("output");
    try {
        showLoader(container);
        const response = await fetch(url);
        const data = await response.json();
        clearLoader(container);
        container.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
    } catch (err) {
        clearLoader(container);
        container.innerHTML = `<p style="color:red; text-align:center;">Error fetching health data</p>`;
    }
}

// Small helper to escape HTML for safe table rendering
function escapeHtml(s) {
    if (s === null || s === undefined) return "-";
    return String(s).replace(/[&<>"']/g, function (m) {
        return { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" }[m];
    });
}

/* ====== Safe extractor for `expansion.contains` (autocomplete response) ====== */
function extractContains(data) {
    if (!data) return [];

    // If server returned an array of bundles/valuesets
    if (Array.isArray(data)) {
        return data.reduce((acc, item) => {
            const c = item && item.expansion && item.expansion.contains;
            if (Array.isArray(c)) acc.push(...c);
            return acc;
        }, []);
    }

    // If server returned a single object with expansion.contains
    const c = data.expansion && data.expansion.contains;
    if (Array.isArray(c)) return c;

    // fallback: if there is a top-level contains field (rare)
    if (Array.isArray(data.contains)) return data.contains;

    return [];
}

/* ====== fetchData (autocomplete) - safe version ====== */
async function fetchData() {
    const diagnosis = document.getElementById("diagnosis").value.trim();
    const container = document.getElementById("output");
    const tableView = document.getElementById("table-view") && document.getElementById("table-view").checked;

    if (!diagnosis) {
        container.innerHTML = `<p style="color:red; text-align:center;">Please enter a diagnosis.</p>`;
        return;
    }

    try {
        showLoader(container);
        const url = `https://backend-kl02.onrender.com/api/v1/autocomplete?query=${encodeURIComponent(diagnosis)}`;
        const response = await fetch(url);
        const data = await response.json();
        clearLoader(container);

        const contains = extractContains(data); // safe extraction

        if (tableView && contains.length > 0) {
            let tableHTML = `
        <table class="table-result clean-table">
          <thead>
            <tr>
              <th>Code</th>
              <th>Display</th>
              <th>Value String</th>
            </tr>
          </thead>
          <tbody>
      `;

            contains.forEach(item => {
                // valueString is inside extension.valueString in your autocomplete examples
                const code = escapeHtml(item.code || "-");
                const display = escapeHtml(item.display || "-");
                const valueString = escapeHtml(item.extension && item.extension.valueString ? item.extension.valueString : "-");

                tableHTML += `<tr><td>${code}</td><td>${display}</td><td>${valueString}</td></tr>`;
            });

            tableHTML += `</tbody></table>`;
            container.innerHTML = tableHTML;
        } else {
            // fallback: pretty-print raw JSON
            container.innerHTML = `<pre>${JSON.stringify(data, null, 2)}</pre>`;
        }
    } catch (err) {
        clearLoader(container);
        container.innerHTML = `<p style="color:red; text-align:center;">Error: ${err.message}</p>`;
    }
}

/* ====== Safe extractor for `concept` (codesystem response) ====== */
function extractConcepts(data) {
    if (!data) return [];

    // If server returned an array of CodeSystems
    if (Array.isArray(data)) {
        return data.reduce((acc, item) => {
            const c = item && item.concept;
            if (Array.isArray(c)) acc.push(...c);
            return acc;
        }, []);
    }

    // If server returned a single CodeSystem object with concept array
    if (Array.isArray(data.concept)) return data.concept;

    return [];
}

/* ====== Enhanced fetchCodeSystem with Excel-like table ====== */
async function fetchCodeSystem() {
    const diagnosis = document.getElementById("diagnosis").value.trim();
    const container = document.getElementById("output");

    if (!diagnosis) {
        container.innerHTML = `<p style="color:red; text-align:center;">Please enter a size.</p>`;
        return;
    }

    try {
        showLoader(container);
        const url = `https://backend-kl02.onrender.com/api/v1/codesystem/namaste?size=${encodeURIComponent(diagnosis)}`;
        const response = await fetch(url);
        const contentType = response.headers.get("content-type");

        let data;
        if (contentType && contentType.includes("application/json")) {
            data = await response.json();
        } else {
            const text = await response.text();
            throw new Error("Non-JSON response from server: " + text.slice(0, 100));
        }

        clearLoader(container);

        const concepts = extractConcepts(data); // safe extraction

        if (concepts.length > 0) {
            // Create Excel-like table with enhanced styling
            let tableHTML = `
                <div class="excel-table-container">
                    <table class="excel-table">
                        <thead>
                            <tr>
                                <th class="excel-header">Code</th>
                                <th class="excel-header">Display</th>
                                <th class="excel-header">Value String</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            concepts.forEach((item, index) => {
                const code = escapeHtml(item.code || "-");
                const display = escapeHtml(item.display || "-");

                // Extract valueString from property array where code === "type"
                let valueString = "-";
                if (Array.isArray(item.property)) {
                    const typeProperty = item.property.find(prop => prop && prop.code === "type");
                    if (typeProperty && typeProperty.valueString) {
                        valueString = typeProperty.valueString;
                    }
                }
                valueString = escapeHtml(valueString);

                const rowClass = index % 2 === 0 ? 'excel-row-even' : 'excel-row-odd';
                tableHTML += `
                    <tr class="${rowClass}">
                        <td class="excel-cell">${code}</td>
                        <td class="excel-cell">${display}</td>
                        <td class="excel-cell">${valueString}</td>
                    </tr>
                `;
            });

            tableHTML += `
                        </tbody>
                    </table>
                </div>
                <div class="table-info">
                    <p>Total records: ${concepts.length}</p>
                </div>
            `;

            container.innerHTML = tableHTML;
        } else {
            container.innerHTML = `<p style="text-align:center; color: #666;">No concepts found in the response.</p>`;
        }
    } catch (err) {
        clearLoader(container);
        container.innerHTML = `<p style="color:red; text-align:center;">Error: ${err.message}</p>`;
    }
}

// Enter key shortcut for both functions
document.getElementById("diagnosis").addEventListener("keydown", e => {
    if (e.key === "Enter") {
        e.preventDefault();
        // Determine which function to call based on current page
        if (window.location.pathname.includes("codesystem.html")) {
            fetchCodeSystem();
        } else {
            fetchData();
        }
    }
});

// keep your theme + lang functions as before


document.addEventListener("DOMContentLoaded", () => {
    applyLanguage("english");
    loadTheme();
    // fetchHealth();
});
